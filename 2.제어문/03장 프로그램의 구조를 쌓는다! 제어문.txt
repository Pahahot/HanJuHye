03장 프로그램의 구조를 쌓는다! 제어문

1.if문 : 수행할 문장은 같은 크기로 들여쓰기 되어야함

1) if문 형식
if 조건문:
    수행할 문장1
    수행할 문장2
    ...
else:
    수행할 문장A
    수행할 문장B
    ...

2) in, not in
in            not in
x in 리스트   x not in 리스트
x in 튜플     x not in 튜플
x in 문자열   x not in 문자열

3) 아무것도 수행하고 싶지않을땐 수행문 대신 pass

4) 조건부 표현식 : 조건문이 참인 수행문 if 조건문 else 조건문이 거짓인 수행문

if score >= 60:
    message = "success"
else:
    message = "failure"

=> message = "success" if score >= 60 else "failure"


2. while문

1) while문 형식
while <조건문>:
    <수행할 문장1>
    <수행할 문장2>
    <수행할 문장3>
    ...

2) 강제로 while문에서 빠져나가려면 break


3. for문

1) for의 기본형식
for 변수 in 리스트(또는 튜플, 문자열):
    수행할 문장1
    수행할 문장2
    ...

2) 리스트 for문
>>> test_list = ['one', 'two', 'three'] 
>>> for i in test_list: 
...     print(i)
... 
one 
two 
three

3) 튜플 for문
>>> a = [(1,2), (3,4), (5,6)]
>>> for (first, last) in a:
...     print(first + last)
...
3
7
11

4) 예
# marks1.py
marks = [90, 25, 67, 45, 80]

number = 0 
for mark in marks: 
    number = number +1 
    if mark >= 60: 
        print("%d번 학생은 합격입니다." % number)
    else: 
        print("%d번 학생은 불합격입니다." % number)
    
5) continue : for문 안에서 continue를 만나면 for문의 처음으로 돌아감 (다음 인덱스 순서)

6) range 함수 : range(10)은 0부터 10 미만의 숫자를 포함하는 range 객체를 만들어 준다.
a = range(1, 11) 는 1부터 10까지

# marks3.py
marks = [90, 25, 67, 45, 80]
for number in range(len(marks)):
    if marks[number] < 60: 
        continue
    print("%d번 학생 축하합니다. 합격입니다." % (number+1))

+ for와 range 함수를 사용하면 소스 코드 단 4줄만으로 구구단을 출력할 수 있다. 들여쓰기에 주의하며 입력해 보자.
>>> for i in range(2,10):        # ①번 for문
...     for j in range(1, 10):   # ②번 for문
...         print(i*j, end=" ") 
...     print('') 
 print(i*j, end=" ")와 같이 매개변수 end를 넣어 준 이유는 해당 결괏값을 출력할 때 다음줄로 넘기지 않고 그 줄에 계속해서 출력하기 위해서

7) 리스트 내포
 [1] 표현식 for 항목 in 반복가능객체 if 조건문]
 [2] [표현식 for 항목1 in 반복가능객체1 if 조건문1
        for 항목2 in 반복가능객체2 if 조건문2
        ...
        for 항목n in 반복가능객체n if 조건문n]

